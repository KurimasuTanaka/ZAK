@using BlazorApp.DA;

@inject IBrigadesDataAccess brigadesDataAccess;

@foreach(Brigade brigade in brigades)
{
    <BrigadeView @ref="@Ref"  brigade="@brigade" UpdateBrigadeLists="UpdateList" AddApplicationToSwap="AddSwapApplication"/>
}


@code {

    private List<Brigade> brigades = new();

    private List<ApplicationScheduled> applicationsToSwap = new();

    private List<BrigadeView> _brigadeViews  = new();
    public BrigadeView Ref {set => _brigadeViews.Add(value); }


    public async Task UpdateList()
    {
        _brigadeViews.ForEach( async brigadeView => await brigadeView.RedrawBrigadeTable());
        StateHasChanged();

        return;
    }

    public async void AddSwapApplication(ApplicationScheduled application)
    {
        applicationsToSwap.Add(application);
        if (applicationsToSwap.Count == 2)
        {
            await brigadesDataAccess.SwapApplications(
                applicationsToSwap[0].brigadeId,                applicationsToSwap[1].brigadeId,
                applicationsToSwap[0].applicationScheduledTime, applicationsToSwap[1].applicationScheduledTime);
            applicationsToSwap.Clear();
            await UpdateList();
        }
    }


    protected override void OnParametersSet()
    {
        brigades = brigadesDataAccess.GetAllBrigades().Result.OrderBy(brigade => brigade.brigadeNumber).ToList();
    }


}
