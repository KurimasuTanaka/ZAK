@using System.Numerics
@using ZAK.DA
@using ZAK.DAO;
@using System.Text.Json
@using Microsoft.EntityFrameworkCore
@using ZAK.MapRoutesManager
@using ZAK.Services.UnresolvedAddressesChecker

@rendermode InteractiveAuto

@inject IJSRuntime Js

@inject IMapRoutesManager mapRoutesManager
@inject IDao<Application, ApplicationModel> applicationsDataAccess;
@inject IDao<Brigade, BrigadeModel> brigadesDataAccess;

@inject ILogger<MapComponentLeaflet> _logger;


<div id="map">placeholder</div>


<style>
    #map {
        height: 900px;
    }

    .div-icon-reg-str {
        border: 3px solid #85dc85;
        background-color: #878786;
        border-radius: 50%;
        text-align: center;
    }

    .div-icon-reg-nstr {
        border: 3px solid #ff8051;
        background-color: #5f616d;
        border-radius: 50%;
        text-align: center;
    }

    .div-icon-imp-str {
        border: 3px solid #85dc85;
        background-color: red;
        border-radius: 50%;
        text-align: center;
        padding: 5px;
    }

    .div-icon-imp-nstr {
        border: 3px solid #ff700e;
        background-color: red;
        border-radius: 50%;
        text-align: center;
        padding: 5px;
    }
</style>
@code {
    [CascadingParameter]
    UnresolvedAddressesInfo unresolvedAddressesInfo { get; set; } = default!;


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _logger.LogInformation("MapComponentLeaflet is rendered for the first time");

            await Js.InvokeVoidAsync("initMap");

            if (!unresolvedAddressesInfo.unresolvedAddressesExist)
            {
                await DrawPaths();
                await DrawMarkers();
            }
            StateHasChanged();
        }

    }

    public async Task DrawMarkers()
    {
        _logger.LogInformation("MapComponentLeaflet is drawing markers");


        List<Application> applications = (await applicationsDataAccess.GetAll(query => query.Include(a => a.address).ThenInclude(a => a.coordinates))).ToList();

        foreach (var application in applications)
        {

            var temp = new
            {
                lat = application.address.coordinates.lat,
                lon = application.address.coordinates.lon,
                id = application.id,
                stretchingStatus = application.stretchingStatus,
                hot = application.important,
                operatorComment = application.operatorComment,
                masterComment = application.masterComment
            };

            await Js.InvokeVoidAsync("drawMarker", JsonSerializer.Serialize(temp));
        }

    }

    public async Task DrawPaths()
    {
        _logger.LogInformation("MapComponentLeaflet is drawing paths");

        try
        {
            List<List<Vector2>> routes = await mapRoutesManager.GetRoutesAsync(brigadesDataAccess, applicationsDataAccess);
            for (int i = 0; i < routes.Count; i++)
            {
                await DrawPath(routes[i], i);
            }

        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }
    }

    public async Task DrawPath(List<Vector2> path, int brigadeNumber)
    {

        _logger.LogInformation("MapComponentLeaflet is drawing paths");

        string pathString = "";
        foreach (var point in path)
        {
            pathString += point.X + " " + point.Y + " ";
            int l = pathString.Length;
        }

        string color = "";
        switch (brigadeNumber)
        {
            case 0: color = "#ffbe0b"; break;
            case 1: color = "#3a5a40"; break;
            case 2: color = "#ff006e"; break;
            case 3: color = "#8338ec"; break;
            case 4: color = "#3a86ff"; break;
        }

        await Js.InvokeVoidAsync("drawPath", pathString, color);
    }

    public async Task RefreshMap()
    {
        _logger.LogInformation("Refreshing map in MapComponentLeaflet component");

        await Js.InvokeVoidAsync("clearMap");
        await DrawPaths();
        StateHasChanged();
    }

}
