@using BlazorApp.DA;
@using BlazorApp.Enums;
@using BlazorBootstrap;

@inject IApplicationsDataAccess applicationsDataAccess;
@inject IWebHostEnvironment enviroment;

@inject IAddressesDataAccess addressesDataAccess;
@inject ICoefficientsDataAccess coefficientsDataAccess;

<Grid TItem="Application" Class="table table-hover table-bordered" Data="applications" AllowDetailView="true"
    AllowFiltering="true" AllowPaging="true" PageSize="100" AllowSorting="true" OnRowClick="OnRowClick"
    AllowRowClick="true">
    <GridColumns>
        @*Id column with set of interactive components*@
        <GridColumn TItem="Application" HeaderText="Id" PropertyName="id">
            <div>
                @context.id
            </div>
            @*Interactive components in Id section ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓*@
            <CheckBoxInputComponent label="Важлива заявка" applicationId="@context.id" propertyName="hot"
            propertyValue="@((bool)context["hot"])" />
            
            <TimeframeApplicationComponent applicationId="@context.id" firstPart="@context.firstPart"
                secondPart="@context.secondPart" timeRangeIsSet="@context.timeRangeIsSet" startHour="@context.startHour"
                endHour="@context.endHour">
            </TimeframeApplicationComponent>
        </GridColumn>
        @*↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑*@

        @*Column with name of the district *@
        <GridColumn TItem="Application" HeaderText="District" PropertyName="districtName"
            SortKeySelector="item => item.districtName">
            @context.districtName
        </GridColumn>

        @*Column name with name of the street*@
        <GridColumn TItem="Application" HeaderText="Street" PropertyName="streetName"
            SortKeySelector="item => item.streetName">
            @(context.streetName + " " + context.building);
        </GridColumn>

        <GridColumn TItem="Application" HeaderText="Stretched" PropertyName="stretchingStatus"
            SortKeySelector="item => item.stretchingStatus">
            @context.stretchingStatus
        </GridColumn>



        @*Column for date*@
        <GridColumn TItem="Application" HeaderText="Date">
            <span>@context.year.@context.month.@context.day</span>
        </GridColumn>
    </GridColumns>

    @*Column for comments section*@
    <GridDetailView TItem="Application">
        <div class="row">
            <div class="col">
                <CommentComponent operatorComment="ffff" masterComment="ccccc" />
            </div>
        </div>

    </GridDetailView>

    <GridColumn TItem="Application" HeaderText="Priority">
        <span>@context.priority</span>
    </GridColumn>
</Grid>


@code {

    [Parameter]
    public EventCallback applicationWasChosen { get; set; }


    List<Application> applications = new List<Application>();

    protected override async void OnParametersSet()
    {
        applications = applicationsDataAccess.GetAllApplicationsWithIgnoring();

        Dictionary<string, double> priorities = await coefficientsDataAccess.GetCoefficientsDictionary();
        List<Address> addresses = await addressesDataAccess.GetAddresses();

        foreach (Application app in applications)
        {
            Address? address = addresses.Find(a => a.streetName == app.streetName && a.building == app.building);
            app.SetupApplicationPriorityLevel(priorities, address?.priority ?? 0.0);
        }
    }
    public async void Redraw()
    {
        applications = applicationsDataAccess.GetAllApplicationsWithIgnoring();
        List<Address> addresses = await addressesDataAccess.GetAddresses();

        Dictionary<string, double> priorities = await coefficientsDataAccess.GetCoefficientsDictionary();

        foreach (Application app in applications)
        {
            Address? address = addresses.Find(a => a.streetName == app.streetName && a.building == app.building);

            app.SetupApplicationPriorityLevel(priorities, await addressesDataAccess.GetPriorityByAddress(app.streetName,
            app.building));
        }


        StateHasChanged();
    }

    public async Task OnRowClick(GridRowEventArgs<Application> application)
    {
        await applicationWasChosen.InvokeAsync(application.Item.id);
    }

}
