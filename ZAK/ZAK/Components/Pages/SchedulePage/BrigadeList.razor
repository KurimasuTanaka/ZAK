@using BlazorApp.DA;
@using ZAK.Components.Pages.SchedulePage.BrigadeComponents
@using MudBlazor
@using ZAK.Services.BrigadesManagerService

@inject IDaoBase<Brigade, BrigadeModel> brigadesDataAccess;
@inject IBrigadesManager _brigadesManager;
@inject ILogger<BrigadeList> _logger;

<ApplicationsRatedListModal @ref="applicationsRatedList" applicationWasChosen="ApplicationWasChosen" />

<MudDropContainer @ref="dropContainer" T="ApplicationScheduled" Items="@applications"
    ItemsSelector="@((item, dropzone) => item.brigadeId.ToString() == dropzone)" ItemDropped="ItemDroppedHandler">
    <ChildContent>
        @foreach (Brigade brigade in brigades)
        {

            var dropzone = brigade.id.ToString();
            <MudPaper Class="ma-4 flex-grow-1">
                <MudList T="ApplicationScheduled" Class="d-flex flex-column mud-height-full">
                    <MudDropZone T="ApplicationScheduled" AllowReorder="true" Identifier="@dropzone" Class="flex-grow-1" />
                </MudList>
            </MudPaper>
        }
    </ChildContent>
    <ItemRenderer>
        <MudListItem T="ApplicationScheduled" Text="@($"{context.applicationScheduledTime} - {@context.id}")"
            OnClick="@(async () => { await ShowSortedApplicationsList(context); })" />
    </ItemRenderer>
</MudDropContainer>

@code {
    [Parameter] public EventCallback RefreshMap { get; set; }

    MudDropContainer<ApplicationScheduled> dropContainer = default!;

    private List<Brigade> brigades = new();

    private List<ApplicationScheduled> applicationsToSwap = new();

    private List<BrigadeView> _brigadeViews = new();
    public BrigadeView Ref { set => _brigadeViews.Add(value); }


    //NEW===========================================================================================================
    private List<ApplicationScheduled> applications = new();
    ApplicationsRatedListModal applicationsRatedList = default!;

    private async Task ItemDroppedHandler(MudItemDropInfo<ApplicationScheduled> dropItem)
    {
        await _brigadesManager.InsertApplication(
        dropItem.Item!.id,
        Int32.Parse(dropItem.DropzoneIdentifier),
        dropItem.IndexInZone,
        dropItem.Item.brigadeId,
        dropItem.Item.applicationScheduledTime);

        // applications.Find(a => a.id == dropItem.Item!.id)!.applicationScheduledTime = dropItem.IndexInZone;
        // applications.Find(a => a.id == dropItem.Item!.id)!.brigadeId = Int32.Parse(dropItem.DropzoneIdentifier);

        applications.Clear();
        await GetApplications();
        StateHasChanged();
    }

    private async Task ApplicationWasChosen(ApplicationScheduled scheduledApplication)
    {
        await _brigadesManager.InsertNewApplicationInEmptySlot(
            scheduledApplication.id, 
            scheduledApplication.brigadeId, 
            scheduledApplication.applicationScheduledTime);
        applications.Clear();
        await GetApplications();
        StateHasChanged();   
    }
    public async Task UpdateList()
    {
        //_brigadeViews.ForEach(async brigadeView => await brigadeView.RedrawBrigadeTable());
        StateHasChanged();

        return;
    }

    private async Task ShowSortedApplicationsList(ApplicationScheduled scheduledApplication)
    {
        _logger.LogInformation("Button on application was pressed. Opening modal window with applications list...");

        await applicationsRatedList.ShowAsync(applications.Where(a => a.brigadeId == scheduledApplication.brigadeId).ToList(), scheduledApplication);
    }

    public async void AddSwapApplication(ApplicationScheduled application)
    {


        applicationsToSwap.Add(application);
        if (applicationsToSwap.Count == 2)
        {

            int brigade1Id = applicationsToSwap[0].brigadeId;
            int brigade2Id = applicationsToSwap[1].brigadeId;

            int application1Time = applicationsToSwap[0].applicationScheduledTime;
            int application2Time = applicationsToSwap[1].applicationScheduledTime;

            if (brigade1Id == brigade2Id)
            {
                Brigade brigade = await brigadesDataAccess.GetById(brigade1Id);

                if (brigade is not null)
                {
                    @* int applicationIdBuf = brigade.applicationsIds[application1Time];
                    brigade.applicationsIds[application1Time] = brigade.applicationsIds[application2Time];
                    brigade.applicationsIds[application2Time] = applicationIdBuf; *@

                    await brigadesDataAccess.Update(brigade, brigade.id);
                }
            }
            else
            {
                Brigade? brigade1 = await brigadesDataAccess.GetById(brigade1Id);
                Brigade? brigade2 = await brigadesDataAccess.GetById(brigade2Id);

                if (brigade1 is not null && brigade2 is not null)
                {
                    @* int applicationIdBuf = brigade1.applicationsIds[application1Time];
                    brigade1.applicationsIds[application1Time] = brigade2.applicationsIds[application2Time];
                    brigade2.applicationsIds[application2Time] = applicationIdBuf; *@

                    await brigadesDataAccess.Update(brigade1, brigade1.id);
                    await brigadesDataAccess.Update(brigade2, brigade2.id);
                }
            }
            applicationsToSwap.Clear();
            await UpdateList();
        }
    }


    private async Task GetApplications()
    {
        _logger.LogInformation("Getting all brigades...");

        brigades = (await brigadesDataAccess.GetAll(query => query.Include(b => b.scheduledApplications).ThenInclude(sa =>
        sa.application))).ToList();

        if (applications.Count == 0)
        {
            foreach (var brigade in brigades)
            {
                applications.AddRange(brigade.GetApplications());
            }
            dropContainer.Refresh();
        }
    }

    protected override async Task OnParametersSetAsync()
    {

        await GetApplications();
    }


}