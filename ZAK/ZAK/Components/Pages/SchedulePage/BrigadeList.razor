@using BlazorApp.DA;
@using ZAK.Components.Pages.SchedulePage.BrigadeComponents
@using MudBlazor
@using ZAK.Services.BrigadesManagerService

@inject IDaoBase<Brigade, BrigadeModel> brigadesDataAccess;
@inject IBrigadesManager _brigadesManager;
@inject ILogger<BrigadeList> _logger;

<ApplicationsRatedListModal @ref="applicationsRatedList" applicationWasChosen="ApplicationWasChosen" />


<MudExpansionPanels MultiExpansion="true">
    <MudDropContainer @ref="dropContainer" T="ApplicationScheduled" Items="@applications"
        ItemsSelector="@((item, dropzone) => item.brigadeId.ToString() == dropzone)" ItemDropped="ItemDroppedHandler">
        <ChildContent>
            @foreach (Brigade brigade in brigades)
            {
                var brigadeNumber = ++brigadeCounter;
                var dropzone = brigade.id.ToString();
                <MudExpansionPanel Text="@($"Бригада {brigadeNumber}")">
                    <MudList T="ApplicationScheduled" Class="d-flex flex-column mud-height-full">
                        <MudDropZone T="ApplicationScheduled" AllowReorder="true" Identifier="@dropzone"
                            Class="flex-grow-1" />
                    </MudList>
                </MudExpansionPanel>
            }
        </ChildContent>
        <ItemRenderer>
            <MudListItem T="ApplicationScheduled" Text="@($"{context.applicationScheduledTime} - {@context.id}")"
                OnClick="@(async () => { await ShowSortedApplicationsList(context); })" />
        </ItemRenderer>
    </MudDropContainer>
</MudExpansionPanels>
@code {
    [Parameter] public EventCallback RefreshMap { get; set; }

    private int brigadeCounter = 0;

    MudDropContainer<ApplicationScheduled> dropContainer = default!;

    private List<Brigade> brigades = new();

    private List<ApplicationScheduled> applicationsToSwap = new();


    //NEW===========================================================================================================
    private List<ApplicationScheduled> applications = new();
    ApplicationsRatedListModal applicationsRatedList = default!;

    private async Task ItemDroppedHandler(MudItemDropInfo<ApplicationScheduled> dropItem)
    {
        await _brigadesManager.InsertApplication(
        dropItem.Item!.id,
        Int32.Parse(dropItem.DropzoneIdentifier),
        dropItem.IndexInZone,
        dropItem.Item.brigadeId,
        dropItem.Item.applicationScheduledTime);

        // applications.Find(a => a.id == dropItem.Item!.id)!.applicationScheduledTime = dropItem.IndexInZone;
        // applications.Find(a => a.id == dropItem.Item!.id)!.brigadeId = Int32.Parse(dropItem.DropzoneIdentifier);

        applications.Clear();
        await GetApplications();
        StateHasChanged();
    }

    private async Task ApplicationWasChosen(ApplicationScheduled scheduledApplication)
    {
        await _brigadesManager.InsertNewApplicationInEmptySlot(
        scheduledApplication.id,
        scheduledApplication.brigadeId,
        scheduledApplication.applicationScheduledTime);

        applications.Clear();
        await GetApplications();

        await applicationsRatedList.HideAsync();
        StateHasChanged();
    }
    private async Task ShowSortedApplicationsList(ApplicationScheduled scheduledApplication)
    {
        _logger.LogInformation("Button on application was pressed. Opening modal window with applications list...");

        await applicationsRatedList.ShowAsync(applications.Where(a => a.brigadeId == scheduledApplication.brigadeId).ToList(),
        scheduledApplication);
    }


    private async Task GetApplications()
    {
        _logger.LogInformation("Getting all brigades...");

        brigades = (await brigadesDataAccess.GetAll(query => query.Include(b => b.scheduledApplications).ThenInclude(sa =>
        sa.application))).ToList();

        if (applications.Count == 0)
        {
            foreach (var brigade in brigades)
            {
                applications.AddRange(brigade.GetApplications());
            }
            dropContainer.Refresh();
        }

        brigadeCounter = 0;
    }

    protected override async Task OnParametersSetAsync()
    {
        await GetApplications();
    }

    protected override void  OnAfterRender(bool firstRender)
    {
    }

}