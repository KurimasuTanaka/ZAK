@using BlazorApp.DA;
@using ZAK.Components.Pages.SchedulePage.BrigadeComponents
@using MudBlazor
@using ZAK.Services.ScheduleManagerService

@inject IDao<Brigade, BrigadeModel> brigadesDataAccess;
@inject IScheduleManager _brigadesManager;
@inject ILogger<BrigadeList> _logger;

<ApplicationsRatedListModal @ref="applicationsRatedList" applicationWasChosen="ApplicationWasChosen"
    TimeWasLeftEmpty="TimeWasLeftEmpty" />


<MudExpansionPanels MultiExpansion="true">
    <MudDropContainer @ref="dropContainer" T="ApplicationScheduled" Items="@applications"
        ItemsSelector="@((item, dropzone) => item.brigadeId.ToString() == dropzone)" ItemDropped="ItemDroppedHandler">
        <ChildContent>
            @{
                int brigadeNumber = 0;
            }
            @foreach (Brigade brigade in brigades)
            {
                ++brigadeNumber;
                var dropzone = brigade.id.ToString();
                <MudExpansionPanel Text="@($"Бригада {brigadeNumber}")">
                    <MudList T="ApplicationScheduled" Class="d-flex flex-column mud-height-full">
                        <MudDropZone T="ApplicationScheduled" AllowReorder="true" Identifier="@dropzone"
                            Class="flex-grow-1" />
                    </MudList>
                </MudExpansionPanel>
            }
        </ChildContent>
        <ItemRenderer>
            @if (context.address is not null)
            {
                <MudListItem T="ApplicationScheduled"
                    Text="@($"{context.applicationScheduledTime + 10} - {context.applicationScheduledTime + 11} | {@context.id} - {@context.address!.streetName} {@context.address!.building}")"
                    OnClick="@(async () => { await ShowSortedApplicationsListModal(context); })" />
            }
            else
            {
                if (context.id == 0)
                {
                    <MudListItem T="ApplicationScheduled"
                        Text="@($"{context.applicationScheduledTime + 10} - {context.applicationScheduledTime + 11} | РЕЗЕРВ")"
                        OnClick="@(async () => { await ShowSortedApplicationsListModal(context); })" />

                }
                else
                {
                    <MudListItem T="ApplicationScheduled"
                        Text="@($"{context.applicationScheduledTime + 10} - {context.applicationScheduledTime + 11} | {@context.id}")"
                        OnClick="@(async () => { await ShowSortedApplicationsListModal(context); })" />
                }
            }

        </ItemRenderer>
    </MudDropContainer>
</MudExpansionPanels>
@code {
    [Parameter] public EventCallback RefreshMap { get; set; }
    MudDropContainer<ApplicationScheduled> dropContainer = default!;
    private List<Brigade> brigades = new();
    private List<ApplicationScheduled> applicationsToSwap = new();


    //NEW===========================================================================================================
    private List<ApplicationScheduled> applications = new();
    ApplicationsRatedListModal applicationsRatedList = default!;

    private async Task ItemDroppedHandler(MudItemDropInfo<ApplicationScheduled> dropItem)
    {
        if(dropItem.Item.id == 0)
        {
            if(dropItem.Item.brigadeId == Int32.Parse(dropItem.DropzoneIdentifier))
            {
                await _brigadesManager.MoveEmptyTimeslotFromOneTimeToAnother(
                    dropItem.Item.brigadeId, 
                    dropItem.IndexInZone, 
                    dropItem.Item.applicationScheduledTime);
            }
            else
            {
                await _brigadesManager.MoveEmptyTimeslotFromOneBrigadeToAnother(
                    Int32.Parse(dropItem.DropzoneIdentifier),
                    dropItem.IndexInZone, 
                    dropItem.Item.brigadeId, 
                    dropItem.Item.applicationScheduledTime);
            }
        } else 
        {
            if (dropItem.Item.brigadeId == Int32.Parse(dropItem.DropzoneIdentifier))
            {
                await _brigadesManager.MoveScheduledApplicationFromOneTimeToAnother(
                    dropItem.Item.id,
                    dropItem.Item.brigadeId,
                    dropItem.IndexInZone,
                    dropItem.Item.applicationScheduledTime);
            }
            else
            {
                await _brigadesManager.MoveScheduledApplicationFromOneBrigadeToAnother(
                    dropItem.Item.id,
                    Int32.Parse(dropItem.DropzoneIdentifier),
                    dropItem.IndexInZone,
                    dropItem.Item.brigadeId,
                    dropItem.Item.applicationScheduledTime);
            }
        }
        applications.Clear();
        await GetApplications();
        StateHasChanged();
    }

    private async Task ApplicationWasChosen(ApplicationScheduled scheduledApplication)
    {
        await _brigadesManager.ScheduleApplication(
        scheduledApplication.id,
        scheduledApplication.brigadeId,
        scheduledApplication.applicationScheduledTime);

        //Refreshing the brigade list
        applications.Clear();
        await GetApplications();

        //Hiding modal window
        await applicationsRatedList.HideAsync();
        StateHasChanged();
    }

    private async Task TimeWasLeftEmpty(ApplicationScheduled scheduledTime)
    {
        await _brigadesManager.MakeTimeSlotEmpty(scheduledTime.brigadeId, scheduledTime.applicationScheduledTime);
        //Refreshing the brigade list
        applications.Clear();
        await GetApplications();

        //Hiding modal window
        await applicationsRatedList.HideAsync();
        StateHasChanged();
    }

    private async Task ShowSortedApplicationsListModal(ApplicationScheduled scheduledApplication)
    {
        _logger.LogInformation("Button on application was pressed. Opening modal window with applications list...");

        await applicationsRatedList.ShowAsync(applications.Where(a => a.brigadeId == scheduledApplication.brigadeId).ToList(),
        scheduledApplication);
    }


    public async Task GetApplications()
    {
        _logger.LogInformation("Getting all brigades...");

        brigades = (
        await brigadesDataAccess.GetAll(
        query => query.
        Include(b => b.scheduledApplications).
        ThenInclude(sa => sa.application).ThenInclude(app => app.address))).ToList();

        if (applications.Count == 0)
        {
            foreach (var brigade in brigades)
            {
                applications.AddRange(brigade.GetApplications());
            }
            dropContainer.Refresh();
        }
    }

    public async Task ReuploadApplications()
    {
        _logger.LogInformation("Getting all brigades...");

        brigades = (
        await brigadesDataAccess.GetAll(
        query => query.
        Include(b => b.scheduledApplications).
        ThenInclude(sa => sa.application).ThenInclude(app => app.address))).ToList();

        applications.Clear();

        foreach (var brigade in brigades)
        {
            applications.AddRange(brigade.GetApplications());
        }
        dropContainer.Refresh();

    }

    public void Refresh()
    {
        dropContainer.Refresh();
    }

    protected override async Task OnParametersSetAsync()
    {
        await GetApplications();
    }

    protected override void OnAfterRender(bool firstRender)
    {
    }

}