@inject IJSRuntime Js

@inject IDaoBase<Brigade, BrigadeModel> _brigadesDataAccess;
@inject ILogger<BrigadeTitle> _logger;


<CardTitle>
    <div style="display: flex; flex-direction: row; align-items:center;">
        <Button @onclick="DeleteBrigade">
            <Icon Name="IconName.XCircleFill" />
        </Button>

        Бригада

        <NumberInput style="width: 10%" TValue="int" Value="brigade.brigadeNumber"
            ValueExpression="() => brigade.brigadeNumber" ValueChanged="(value) => BrigadeNumberChanged(value)" />

        <Button @onclick="CopyBrigade">
            Скопировать бригаду
        </Button>
    </div>
</CardTitle>
@code
{
    [CascadingParameter] public Brigade brigade { get; set; } = new();

    //Delete brigade from db
    private async Task DeleteBrigade()
    {
        _logger.LogInformation($"Deleting brigade with id {brigade.id}...");

        await _brigadesDataAccess.Delete(brigade.id);

        _logger.LogInformation($"Brigade with id {brigade.id} deleted successfully");
    }

    //Copy brigade to clipboard in format that usually used in work chats
    private async Task CopyBrigade()
    {
        _logger.LogInformation("Copying brigade to clipboard...");

        string brigadeInChatFormat = String.Empty;

        @* brigadeInChatFormat += "Бригада " + brigade.brigadeNumber + "\n";
        for (int i = 0; i < brigade.scheduledApplications.Count; i++)
        {
            if(brigade.applications[i] is null)
            {
                brigadeInChatFormat += 
                (i + 10).ToString() + " - " + (i + 11).ToString() + " " + 
                "----- Резерв -----\n";
            } else 
            {
                brigadeInChatFormat += 
                    (i + 10).ToString() + " - " + (i + 11).ToString() + " " + 
                    brigade.applications[i].id + " " + brigade.applications[i].streetName + " " + brigade.applications[i].building + "\n";
            }
        } *@

        _logger.LogInformation("Brigade string generated successfully. \nInvoking clipboard function... ");

        await Js.InvokeVoidAsync("CopyToClipboard", brigadeInChatFormat);

        _logger.LogInformation("Brigade copied to clipboard successfully");

    }

    //Change brigade number
    private async Task BrigadeNumberChanged(int value)
    {
        _logger.LogInformation($"Brigade with id {brigade.id} changing number to {value}...");

        Brigade newBrigadeInstance = await _brigadesDataAccess.GetById(brigade.id);
        newBrigadeInstance.brigadeNumber = value;
        await _brigadesDataAccess.Update(newBrigadeInstance, newBrigadeInstance.id);

        _logger.LogInformation($"Brigade with id {brigade.id} changed number successfully to {value}");
    }


}