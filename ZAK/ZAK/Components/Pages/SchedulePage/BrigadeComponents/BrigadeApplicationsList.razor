@using MudBlazor

@rendermode InteractiveAuto

@inject IBrigadeRepository _brigadeRepository;
@inject ILogger<BrigadeApplicationsList> _logger;

<MudExpansionPanels MultiExpansion="true">
    <MudExpansionPanel Text="@brigade.id.ToString()">
        <MudDropContainer T="ApplicationScheduled" Items="@applications" ItemsSelector="@((item, dropzone) => true)"
            ItemDropped="ItemUpdated" Class="d-flex flex-wrap flex-grow-1">
            <ChildContent>
                <MudDropZone T="ApplicationScheduled" Identifier="@brigade.id.ToString()" AllowReorder="true"
                    Class="rounded mud-background-gray pa-6 ma-8 flex-grow-1">
                </MudDropZone>
            </ChildContent>
            <ItemRenderer>
                <ScheduledApplication application="@context" ApplicationButtonWasPressed="ShowSortedApplicationsList" />
            </ItemRenderer>
        </MudDropContainer>
    </MudExpansionPanel>
</MudExpansionPanels>

@code
{
    [CascadingParameter] public Brigade brigade { get; set; } = new();

    public List<ApplicationScheduled> applications = new();
    ApplicationsRatedListModal applicationsRatedList = default!;

    protected override void OnParametersSet()
    {
        applications = brigade.GetApplications();
    }

    private async Task ItemUpdated(MudItemDropInfo<ApplicationScheduled> dropItem)
    {
        if (dropItem.Item == null) throw new ArgumentNullException(nameof(dropItem.Item));

        //Application was dropped in the same place
        if (dropItem.Item.applicationScheduledTime == dropItem.IndexInZone) return;


        //Get brigade with scheduled applications
        Brigade? brigadeToUpdate = await _brigadeRepository.GetByIdAsync(brigade.id);

        if (brigadeToUpdate == null) throw new ArgumentNullException(nameof(brigadeToUpdate));

        //Go trough all applications and update their scheduled time if it was changed
        for (int i = 0; i < applications.Count; i++)
        {
            if (applications[i].id == 0) continue;
            else if (applications[i].applicationScheduledTime != i)
            {
                brigadeToUpdate.scheduledApplications.RemoveAll(sa => sa.applicationId == applications[i].id);
                brigadeToUpdate.scheduledApplications.Add(new ScheduledApplicationModel()
                {
                    applicationId = applications[i].id,
                    brigadeId = brigade.id,
                    scheduledTime = dropItem.IndexInZone
                });

            }
        }

        //update brigade
        await _brigadeRepository.UpdateAsync(brigadeToUpdate);

        //Update view
        StateHasChanged();
    }

    int pressedApplicationScheduledTime = 0;
    private async Task ShowSortedApplicationsList(int scheduledTime)
    {
        _logger.LogInformation("Button on application was pressed. Opening modal window with applications list...");

        pressedApplicationScheduledTime = scheduledTime;
    }

    private async Task ApplicationWasChosen(int applicationId)
    {
        _logger.LogInformation("Application was chosen. Adding application to brigade's scheduled applications list...");

        await applicationsRatedList.HideAsync();

        ScheduledApplicationModel scheduledApplication = new();
        scheduledApplication.scheduledTime = pressedApplicationScheduledTime;
        scheduledApplication.applicationId = applicationId;
        scheduledApplication.brigadeId = brigade.id;

        Brigade newBrigadeInstance = await _brigadeRepository.GetByIdAsync(brigade.id);

        newBrigadeInstance!.scheduledApplications.Add(scheduledApplication);
        await _brigadeRepository.UpdateAsync(newBrigadeInstance);
    }
}