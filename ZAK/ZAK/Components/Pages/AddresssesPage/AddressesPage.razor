@page "/addresses"
@using Microsoft.EntityFrameworkCore
@using ZAK.Services.UnresolvedAddressesChecker
@rendermode InteractiveServer


@inject IAddressRepository _addressRepository;
@inject IGeoDataManager geoDataManager;
@inject IUnresolvedAddressesChecker unresolvedAddressesChecker;
@inject ILogger<AddressesPage> _logger;

<PageTitle>Адреси</PageTitle>

<style>
    .W10 {
        width: 10%;
    }

    .W5 {
        width: 5%;
    }
</style>

<Button @ref="loadCoordinatesButton" Color="ButtonColor.Primary" @onclick="LoadCoordinatesData"> Подтянуть координаты
</Button>

<Callout Color="CalloutColor.Success">
    <p>Было найдено @(unresolvedAddressesCount) незарезолвленых адресов</p>
</Callout>

<AddressEditingModal @ref="addressEditingModal" UpdateTable="UpdateTable" />

<Grid @ref="addressGrid" TItem="Address" Class="table table-hover table-bordered table-striped"
    DataProvider="AddressesDataProvider" AllowPaging="true" PageSize="50" AllowFiltering="true" AllowSorting="true"
    Responsive="true">

    <GridColumns>

        <GridColumn TItem="Address" HeaderText="-" Filterable="false" Sortable="false" TextAlignment="Alignment.Center" >
            <Button @onclick="@(mouseArg => addressEditingModal.ShowModal(context))">
                <Icon Name="IconName.Pencil" />
            </Button>
        </GridColumn>
        <GridColumn TItem="Address" HeaderText="Вулиця" PropertyName="streetName" FilterTextboxWidth="200" TextAlignment="Alignment.Center"
            SortKeySelector="item => item.streetName" ColumnClass="@(x => "W10")">
            @context.streetName
        </GridColumn>
        <GridColumn TItem="Address" HeaderText="Будинок" PropertyName="building" TextAlignment="Alignment.Center"
            SortKeySelector="item => item.building" ColumnClass="@(x => "W5")">
            @context.building
        </GridColumn>
        <GridColumn TItem="Address" HeaderText="Пріорітет" PropertyName="priority" ColumnClass="@(x => "W5")">
            <PriorityInputComponent addressId="context.Id" priority="context.addressPriority!.priority"  />
        </GridColumn>

        <GridColumn TItem="Address" HeaderText="Альт. вулиця" PropertyName="streetNameAlias">
            <AliasInputComponent addressId="context.Id" alias="@(context.addressAlias is not null ? context.addressAlias!.streetAlias : "")" streetAlias="@true" />
        </GridColumn>
        <GridColumn TItem="Address" HeaderText="Альт. буд" PropertyName="buildingAlias" ColumnClass="@(x => "W5")">
            <AliasInputComponent addressId="context.Id" alias="@(context.addressAlias is not null ? context.addressAlias!.buildingAlias : "")" streetAlias="@false" />
        </GridColumn>


        <GridColumn TItem="Address" HeaderText="Широта \ Долгота" PropertyName="Latitude"
            ColumnClass="@(x => "blackoutCell")">
            <CoordinatesBoxComponent context="context" informationUpdated="UpdateTable" />
        </GridColumn>

        <GridColumn TItem="Address" HeaderText="Рез." PropertyName="resolved" SortKeySelector="item => item.resolved" TextAlignment="Alignment.Center" Filterable="false" ColumnClass="@(x => "W5")">
            <AddressResolvedComponent resolved="context.resolved"  />
        </GridColumn>

        <GridColumn TItem="Address" HeaderText="Доступ" ColumnClass="@(x => "W10")">
            <AddressAccessComponent addressId="context.Id" equipmentAccess="@context.equipmentAccess" />
        </GridColumn>
    </GridColumns>
</Grid>


@code {

    private Button loadCoordinatesButton = default!;
    private Grid<Address> addressGrid = default!;
    private AddressEditingModal addressEditingModal = default!;

    private int unresolvedAddressesCount = 0;
    private async Task<GridDataProviderResult<Address>> AddressesDataProvider(GridDataProviderRequest<Address> request)
    {
        _logger.LogInformation("Loading addresses data");

        List<Address> addresses = (await _addressRepository.GetAllAsync()).ToList();

        unresolvedAddressesCount = unresolvedAddressesChecker.ResolveAddresses(addresses);
        StateHasChanged();

        return await Task.FromResult(request.ApplyTo(addresses));
    }

    private async void UpdateTable()
    {
        await addressGrid.RefreshDataAsync();
    }

    private async void LoadCoordinatesData()
    {
        _logger.LogInformation("Loading coordinates data");

        loadCoordinatesButton.ShowLoading("Загрузка...");
        await geoDataManager.PopulateApplicationsWithGeoData();
        await addressGrid.RefreshDataAsync();


        loadCoordinatesButton.HideLoading();

    }

}
