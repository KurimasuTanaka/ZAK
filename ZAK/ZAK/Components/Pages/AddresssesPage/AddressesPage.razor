@page "/addresses"
@using Microsoft.EntityFrameworkCore
@using ZAK.Services.UnresolvedAddressesChecker
@rendermode InteractiveServer


@inject IDaoBase<Address, AddressModel> addressesDataAccess;
@inject IGeoDataManager geoDataManager;
@inject IUnresolvedAddressesChecker unresolvedAddressesChecker;
@inject ILogger<AddressesPage> _logger;


<Button @ref="loadCoordinatesButton" Color="ButtonColor.Primary" @onclick="LoadCoordinatesData"> Подтянуть координаты
</Button>

<Callout Color="CalloutColor.Success">
    <p>Было найдено @(unresolvedAddressesCount) незарезолвленых адресов</p>
</Callout>

<Grid @ref="addressGrid" TItem="Address" Class="table table-hover table-bordered table-striped"
    DataProvider="AddressesDataProvider" AllowPaging="true" PageSize="50" AllowFiltering="true" AllowSorting="true"
    Responsive="true">

    <GridColumns>

    

    <GridColumn TItem="Address" HeaderText="Вулиця" PropertyName="streetName" FilterTextboxWidth="200"
        SortKeySelector="item => item.streetName">
        @context.streetName
    </GridColumn>
    <GridColumn TItem="Address" HeaderText="Будинок" PropertyName="building" SortKeySelector="item => item.building">
        @context.building
    </GridColumn>
    <GridColumn TItem="Address" HeaderText="Пріорітет" PropertyName="priority">
        <PriorityInputComponent addressId="context.Id" priority="context.priority" />
    </GridColumn>

    <GridColumn TItem="Address" HeaderText="Альт. вулиця" PropertyName="streetAlias">
        <AliasInputComponent addressId="context.Id" alias="@context.streetAlias" streetAlias="@true" />
    </GridColumn>
    <GridColumn TItem="Address" HeaderText="Альт. буд" PropertyName="buildingAlias">
        <AliasInputComponent addressId="context.Id" alias="@context.buildingAlias" streetAlias="@false" />
    </GridColumn>


    <GridColumn TItem="Address" HeaderText="Широта \ Долгота" PropertyName="Latitude" ColumnClass="@(x => "blackoutCell")">
        <CoordinatesBoxComponent context="context" />
    </GridColumn>

    <GridColumn TItem="Address" HeaderText="Рез." PropertyName="resolved" SortKeySelector="item => item.resolved">
        <AddressResolvedComponent resolved="context.resolved" />
    </GridColumn>


    <GridColumn TItem="Address" HeaderText="Група" PropertyName="blackoutGroup">
        <AddressBlackoutGroupComponent addressId="context.Id" group="@context.blackoutGroup" />
    </GridColumn>

    <GridColumn TItem="Address" HeaderText="Доступ">
        <AddressAccessComponent addressId="context.Id" equipmentAccess="@context.equipmentAccess" />
    </GridColumn>
    </GridColumns>
</Grid>


@code {

    private Button loadCoordinatesButton = default!;
    private Grid<Address> addressGrid = default!;

    private int unresolvedAddressesCount = 0;
    private async Task<GridDataProviderResult<Address>> AddressesDataProvider(GridDataProviderRequest<Address> request)
    {
        _logger.LogInformation("Loading addresses data");

        List<Address> addresses = (await addressesDataAccess.GetAll(query => query.
            Include(a => a.coordinates).
            Include(a => a.addressPriority).
            Include(a => a.addressAlias))).ToList();

        unresolvedAddressesCount = unresolvedAddressesChecker.ResolveAddresses(addresses);
        StateHasChanged();

        return await Task.FromResult(request.ApplyTo(addresses));
    }

    private async void LoadCoordinatesData()
    {
        _logger.LogInformation("Loading coordinates data");

        loadCoordinatesButton.ShowLoading("Загрузка...");
        await geoDataManager.PopulateApplicationsWithGeoData();
        await addressGrid.RefreshDataAsync();


        loadCoordinatesButton.HideLoading();

    }

}    
