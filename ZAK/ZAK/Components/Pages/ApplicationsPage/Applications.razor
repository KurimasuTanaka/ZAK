@page "/applications"
@* @attribute [Authorize] *@
@rendermode InteractiveServer


@using ZAK.DA;
@using BlazorApp.Enums;
@using BlazorBootstrap;
@using Microsoft.AspNetCore.Authorization
@using ZAK.Components.Pages.ApplicationsPage.ApplicationInputComponents;
@using ZAK.Components.Pages.ApplicationsPage.ApplicationsActivities;

@using System.Diagnostics;
@inject IDao<Application, ApplicationModel> applicationsDataAccess;
@inject IWebHostEnvironment enviroment;

@inject ILogger<Applications> _logger;

<ApplicationEditorModal @ref="applicationEditorModal" />



<Card class="my-3">
  <CardBody>
    <Switch Label="Показувати тільки оновлені" @bind-Value="showUpdated" @bind-Value:after="Redraw" />
    <Switch Label="Показувати ігноровані" @bind-Value="showIgnored" Disabled="@showUpdated"
      @bind-Value:after="Redraw" />
    <ApplicationsActivities />
  </CardBody>
</Card>

<Grid @ref="applicationsGrid" TItem="Application" Class="table table-hover table-bordered"
  DataProvider="ApplicationsDataProvider" AllowFiltering="true" AllowPaging="true" PageSize="100" AllowSorting="true"
  SelectionMode="GridSelectionMode.Multiple" Responsive="true">

  @*Id column with set of interactive components*@
  <GridColumn TItem="Application" HeaderText="Id" PropertyName="id" SortKeySelector="item => item.id">
    <div>
      @context.id
      <Button @onclick="@(mouseArg => applicationEditorModal.ShowModal(context))">
        <Icon Name="IconName.Pencil" />
      </Button>
      <ApplicationWasChangedIcon application="@context" />
    </div>
    @*Interactive components in Id section ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓*@
    <CheckBoxInputComponent label="Ігнорувати" applicationId="@context.id" propertyName="ignored"
      propertyValue="@(context.ignored)" />
    <CheckBoxInputComponent label="Важлива заявка" applicationId="@context.id" propertyName="important"
      propertyValue="@(context.important)" />

    <TimeframeApplicationComponent applicationId="@context.id" firstPart="@context.firstPart"
      secondPart="@context.secondPart" timeRangeIsSet="@context.timeRangeIsSet" startHour="@context.startHour"
      endHour="@context.endHour">
    </TimeframeApplicationComponent>
  </GridColumn>
  @*↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑*@

  @*Interactivity column*@
  <GridColumn TItem="Application" HeaderText="Параметры">

    <Switch 
      Label="Интересовался статусом" 
      @bind-Value="@context.statusWasChecked" 
      @bind-Value:after="@(async () => await applicationsDataAccess.Update(context, findPredicate: x => x.id == context.id))" />

    <Switch 
      Label="Срочка" 
      @bind-Value="@context.urgent" 
      @bind-Value:after="@(async () => await applicationsDataAccess.Update(context, findPredicate: x => x.id == context.id))" />

    <Switch 
      Label="Есть свободный кабель" 
      @bind-Value="@context.freeCable" 
      @bind-Value:after="@(async () => await applicationsDataAccess.Update(context, findPredicate: x => x.id == context.id))" />

    <Switch 
      Label="Смена тарифа" 
      @bind-Value="@context.tarChangeApp" 
      @bind-Value:after="@(async () => await applicationsDataAccess.Update(context, findPredicate: x => x.id == context.id))" />

    <hr>

    <InputDeadlineComponent applicationId="@context.id" daysForConnection="@context.maxDaysForConnection" />
  </GridColumn>

  @*↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑*@


  @*Column with name of the district *@
  <GridColumn TItem="Application" HeaderText="District" PropertyName="districtName" style="width: 5%;"
    SortKeySelector="item => item.districtName">
    @context.districtName
  </GridColumn>

  @*Column name with name of the street*@
  <GridColumn TItem="Application" HeaderText="Street" PropertyName="streetName"
    SortKeySelector="item => item.streetName">
    @(context.streetName + " " + context.building);
  </GridColumn>

  @*Column with stretching status ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓*@
  <GridColumn style="width: 10%;" TItem="Application" HeaderText="Stretching" PropertyName="stretchingStatus"
    SortKeySelector="item => item.stretchingStatus"
    ColumnClass="@(x => StretchingStatusComponent.GetStrechingStatusClass(x.stretchingStatus))">

    <StretchingStatusComponent applicationId="@context.id" stretchingStatus="@context.stretchingStatus" />
  </GridColumn>
  @*↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑*@

  @*Column for comments section*@
  <GridColumn TItem="Application" HeaderText="Comment" PropertyName="operatorComment">
    <CommentComponent operatorComment="@context.operatorComment" masterComment="@context.masterComment">
    </CommentComponent>
  </GridColumn>

  @*Column for date*@
  <GridColumn TItem="Application" HeaderText="Date" style="width: 15%;">
    <span>@context.year.@context.month.@context.day</span>
    <span>
      <h6>Дней к дедлайну: </h6> @context.daysToDeadline
    </span>
  </GridColumn>
</Grid>

@code {
  private bool showIgnored = true;

  //Make this thing async

  ApplicationAdditionModal applicationAdditionModal = default!;
  ApplicationEditorModal applicationEditorModal = default!;
  private Grid<Application> applicationsGrid = default!;
  private bool showUpdated = false;

  public async Task Redraw()
  {
    _logger.LogInformation("Redrawing applications table");

    await applicationsGrid.RefreshDataAsync();
  }

  private async Task<GridDataProviderResult<Application>> ApplicationsDataProvider(
  GridDataProviderRequest<Application> request)
  {
    List<Application> applications;

    if (showUpdated)
    {
      applications = (await applicationsDataAccess.GetAll(query => query.Include(a =>
      a.address).ThenInclude(ad => ad.district).AsSplitQuery())).Select(a => new Application(a)).Where(a => a.addresWasUpdated
      == true).ToList();
    }
    else
    {
      if (showIgnored) applications = (await applicationsDataAccess.GetAll(query => query.Include(a =>
      a.address).ThenInclude(ad => ad.district).AsSplitQuery())).ToList();
      else applications = (await applicationsDataAccess.GetAll(query => query.Include(a => a.address).ThenInclude(ad =>
      ad.district).AsSplitQuery())).Where(a => a.ignored == false).ToList();
    }
    return await Task.FromResult(request.ApplyTo(applications));
  }



}
