@inject IBlackoutScheduleDataAccess blackoutScheduleDataAccess;


<Button @ref="button" @onclick="ChangeZone" > <div> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </div></Button> 


@code {
    [Parameter] public int group { get; set; } = 0;
    [Parameter] public int day { get; set; } = 0;
    [Parameter] public int time { get; set; } = 0;

    BlackoutZone blackoutZone = BlackoutZone.Unknown;

    Button button = default!;
    protected override async void OnAfterRender(bool firstRender)
    {
        blackoutZone = await blackoutScheduleDataAccess.GetZone(group, day, time);
        SetButtonColor();
        if (firstRender) StateHasChanged();
    }

    private void SetButtonColor()
    {
        switch (blackoutZone)
        {
            case BlackoutZone.Unknown:
                button.Color = ButtonColor.Warning;
                break;
            case BlackoutZone.White:
                button.Color = ButtonColor.Light;
                break;
            case BlackoutZone.Gray:
                button.Color = ButtonColor.Secondary;
                break;
            case BlackoutZone.Black:
                button.Color = ButtonColor.Dark;
                break;
        }
    }

    private async void ChangeZone()
    {
        switch (blackoutZone)
        {
            case BlackoutZone.Unknown:
                blackoutZone = BlackoutZone.White;
                break;
            case BlackoutZone.White:
                blackoutZone = BlackoutZone.Gray;
                break;
            case BlackoutZone.Gray:
                blackoutZone = BlackoutZone.Black;
                break;
            case BlackoutZone.Black:
                blackoutZone = BlackoutZone.White;
                break;
        }
        await blackoutScheduleDataAccess.SetZone(group, day, time, blackoutZone);
        SetButtonColor();

    }
}
