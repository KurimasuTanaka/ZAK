@using System.Numerics
@using BlazorApp.DA
@using System.Text.Json
@using ZAK.MapRoutesManager

@rendermode InteractiveAuto

@inject IJSRuntime Js

@inject IMapRoutesManager mapRoutesManager
@inject IApplicationsDataAccess applicationsDataAccess;
@inject IBrigadesDataAccess brigadesDataAccess;




<div id="map">placeholder</div>


<style>
    #map {
        height: 900px;
    }

    .div-icon-reg-str {
        border: 3px solid #85dc85;
        background-color: #878786;
        border-radius: 50%;
        text-align: center;
    }

    .div-icon-reg-nstr {
        border: 3px solid #ff700e;
        background-color: #878786;
        border-radius: 50%;
        text-align: center;
    }

    .div-icon-imp-str {
        border: 3px solid #85dc85;
        background-color: red;
        border-radius: 50%;
        text-align: center;
        padding: 5px;
    }

    .div-icon-imp-nstr {
        border: 3px solid #ff700e;
        background-color: red;
        border-radius: 50%;
        text-align: center;
        padding: 5px;
    }
</style>
@code {

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Js.InvokeVoidAsync("initMap");
            await DrawPaths();
            await DrawMarkers();



            StateHasChanged();
        }

    }

    public async Task DrawMarkers()
    {
        List<Application> applications = applicationsDataAccess.GetAllApplicationsWithIgnoring();

        foreach (var application in applications)
        {

            var temp = new {
                lat = application.address.coordinates.lat,
                lon = application.address.coordinates.lon,
                id = application.id,
                stretchingStatus = application.stretchingStatus,
                hot = application.hot,
                operatorComment = application.operatorComment,
                masterComment = application.masterComment
            };

@* 
            markersString += "{" +
            "lat " + application.address.coordinates.lat + " " +
            application.address.coordinates.lon + " " +
            application.id + " " +
            application.stretchingStatus + " " +
            application.hot + " " +
            application.operatorComment + " " +
            application.masterComment + "}"; *@



            await Js.InvokeVoidAsync("drawMarker", JsonSerializer.Serialize(temp));
        }

    }

    public async Task DrawPaths()
    {
        try
        {
            List<List<Vector2>> routes = await mapRoutesManager.GetRoutesAsync(brigadesDataAccess, applicationsDataAccess);
            for (int i = 0; i < routes.Count; i++)
            {
                await DrawPath(routes[i], i);
            }

        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }
    }

    public async Task DrawPath(List<Vector2> path, int brigadeNumber)
    {
        string pathString = "";
        foreach (var point in path)
        {
            pathString += point.X + " " + point.Y + " ";
            int l = pathString.Length;
        }

        string color = "";
        switch (brigadeNumber)
        {
            case 0: color = "#ffbe0b"; break;
            case 1: color = "#3a5a40"; break;
            case 2: color = "#ff006e"; break;
            case 3: color = "#8338ec"; break;
            case 4: color = "#3a86ff"; break;
        }

        await Js.InvokeVoidAsync("drawPath", pathString, color);
    }

    public async Task RefreshMap()
    {
        await Js.InvokeVoidAsync("clearMap");
        await DrawPaths();
        StateHasChanged();
    }

}
